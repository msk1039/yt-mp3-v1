services:
  redis:
    image: redis:7-alpine
    platform: ${PLATFORM:-linux/arm64}
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      platforms:
        - ${PLATFORM:-linux/arm64}
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - MAX_CONCURRENT_DOWNLOADS=3
      - CLEANUP_INTERVAL=3600
      - TEMP_DIR=/app/temp
      - STORAGE_DIR=/app/downloads
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./backend/temp:/app/temp:rw
      - ./backend/downloads:/app/downloads:rw
      - ./backend/logs:/app/logs:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      platforms:
        - ${PLATFORM:-linux/arm64}
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - BACKEND_URL=${BACKEND_URL:-http://backend:8000}
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    platform: ${PLATFORM:-linux/arm64}
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy

volumes:
  redis_data: